{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Template Multi_AZ: Create a highly available, scalable Instance stack with a multi-AZ. This template demonstrates using the AWS CloudFormation bootstrap scripts to install the packages and files necessary to deploy a scalable application. **WARNING** This template creates one or more Amazon EC2 instances, an Elastic Load Balancer. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {

    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "VpcId" : {
      "Type" : "AWS::EC2::VPC::Id",
      "Description" : "VpcId of your existing Virtual Private Cloud (VPC) (Currently unused/Need testing)",
      "ConstraintDescription" : "must be the VPC Id of an existing Virtual Private Cloud."
    },

    "MainSubnets" : {
      "Type" : "List<AWS::EC2::Subnet::Id>",
      "Description" : "The list of SubnetIds in your Virtual Private Cloud (VPC)",
      "ConstraintDescription" : "must be a list of an existing public facing subnets in the selected Virtual Private Cloud."
    },

    "ELBName": {
      "Description" : "Name of Elastic Load Balancer",
      "Type": "String"
    },

    "ELBSubnets": {
      "Type" : "List<AWS::EC2::Subnet::Id>",
      "Description" : "The list of SubnetIds in your Virtual Private Cloud (VPC) to attach the ELB",
      "ConstraintDescription" : "must be a list of an existing subnets in the selected Virtual Private Cloud."
    },

    "ELBSecurityGroup": {
      "Description" : "Name of an existing ELB Security Group",
      "Type": "AWS::EC2::SecurityGroup::Id",
      "ConstraintDescription" : "must be the name of an existing Security Group."
    },

    "PublicENISecurityGroup": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::SecurityGroup::Id",
      "ConstraintDescription" : "must be the name of an existing Security Group."
    },

    "PrivateENISecurityGroup": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::SecurityGroup::Id",
      "ConstraintDescription" : "must be the name of an existing Security Group."
    },

    "AppServerMinCapacity": {
      "Default": "2",
      "Description" : "Minimum number of AppServer instances",
      "Type": "Number"
    },

    "AppServerMaxCapacity": {
      "Default": "2",
      "Description" : "Maximum number of AppServer instances",
      "Type": "Number"
    },

    "AppServerDesiredCapacity": {
      "Default": "2",
      "Description" : "Desired number of AppServer instances",
      "Type": "Number"
    },

    "InstanceType" : {
      "Description" : "AppServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
,
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "AMIId": {
      "Description" : "The AMI Id",
      "Type": "String",
      "ConstraintDescription" : "must be the name of an existing AMI."
    },

    "CPUThresholdUpper": {
      "Default" : "70",
      "Description" : "The lower threshold for the CPU utilisation, to trigger scaling up.",
      "Type": "Number"
    },

    "CPUThresholdLower": {
      "Default" : "30",
      "Description" : "The lower threshold for the CPU utilisation, to trigger scaling down",
      "Type": "Number"
    },

    "OperatorEMail": {
      "Description" : "The email address for SNS Notifications",
      "Type": "String",
      "ConstraintDescription" : "must be the name of an existing SNS endpoint."
    }

  },

  "Resources" : {

    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "LoadBalancerName" : { "Ref" : "ELBName" },
        "CrossZone" : "true",
        "SecurityGroups" : [ { "Ref" : "ELBSecurityGroup" } ],
        "Subnets" : { "Ref" : "ELBSubnets" },
        "LBCookieStickinessPolicy" : [ {
          "PolicyName" : "CookieBasedPolicy",
          "CookieExpirationPeriod" : "30"
        } ],
        "Listeners" : [ {
          "LoadBalancerPort" : "80",
          "InstancePort" : "80",
          "Protocol" : "HTTP",
          "PolicyNames" : [ "CookieBasedPolicy" ]
        }, {
          "LoadBalancerPort" : "22",
          "InstancePort" : "22",
          "Protocol" : "TCP",
          "PolicyNames" : [ ]
        } ],
        "HealthCheck" : {
          "Target" : "HTTP:80/",
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "5",
          "Interval" : "10",
          "Timeout" : "5"
        }
      }
    },

    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [ { "Endpoint": { "Ref": "OperatorEMail" }, "Protocol": "email" } ]
      }
    },

    "AppServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : { "Ref" : "MainSubnets" },
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : { "Ref" : "AppServerMinCapacity" },
        "MaxSize" : { "Ref" : "AppServerMaxCapacity" },
        "DesiredCapacity" : { "Ref" : "AppServerDesiredCapacity" },
        "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ],
        "NotificationConfigurations" : [{
          "TopicARN" : { "Ref" : "NotificationTopic" },
          "NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
                                  "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                  "autoscaling:EC2_INSTANCE_TERMINATE",
                                  "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
        }]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT30M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT30M",
          "WaitOnResourceSignals": "true"
        }
      }
    },

    "ScaleUpPolicy" : {
       "Type" : "AWS::AutoScaling::ScalingPolicy",
       "Properties" : {
          "AdjustmentType" : "ChangeInCapacity",
          "AutoScalingGroupName" : { "Ref" : "AppServerGroup" },
          "Cooldown" : "1",
          "ScalingAdjustment" : "1"
       }
    },
    "CPUAlarmHigh": {
       "Type": "AWS::CloudWatch::Alarm",
       "Properties": {
          "EvaluationPeriods": "1",
          "Statistic": "Average",
          "Threshold": { "Ref" : "CPUThresholdUpper" },
          "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
          "Period": "60",
          "AlarmActions": [ { "Ref": "ScaleUpPolicy" } ],
          "Namespace": "AWS/EC2",
          "Dimensions": [ {
             "Name": "AutoScalingGroupName",
             "Value": { "Ref": "AppServerGroup" }
          } ],
          "ComparisonOperator": "GreaterThanThreshold",
          "MetricName": "CPUUtilization"
       }
    },

    "ScaleDownPolicy" : {
       "Type" : "AWS::AutoScaling::ScalingPolicy",
       "Properties" : {
          "AdjustmentType" : "ChangeInCapacity",
          "AutoScalingGroupName" : { "Ref" : "AppServerGroup" },
          "Cooldown" : "1",
          "ScalingAdjustment" : "1"
       }
    },
    "CPUAlarmLow": {
       "Type": "AWS::CloudWatch::Alarm",
       "Properties": {
          "EvaluationPeriods": "1",
          "Statistic": "Average",
          "Threshold": { "Ref" : "CPUThresholdLower" },
          "AlarmDescription": "Alarm if CPU too low",
          "Period": "60",
          "AlarmActions": [ { "Ref": "ScaleDownPolicy" } ],
          "Namespace": "AWS/EC2",
          "Dimensions": [ {
             "Name": "AutoScalingGroupName",
             "Value": { "Ref": "AppServerGroup" }
          } ],
          "ComparisonOperator": "LessThanThreshold",
          "MetricName": "CPUUtilization"
       }
    },

    "LaunchConfig": {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "full_install" : [ "install_cfn" ]
          },

          "install_cfn" : {
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource LaunchConfig ",
                  "         --configsets full_install ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },

            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
          }

        }
      },
      "Properties": {
        "ImageId" : { "Ref" : "AMIId" },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ { "Ref" : "PublicENISecurityGroup" }, { "Ref" : "PrivateENISecurityGroup" } ],
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "yum update -y aws-cfn-bootstrap\n",

          "/opt/aws/bin/cfn-init -v ",
          "         --stack ", { "Ref" : "AWS::StackId" },
          "         --resource LaunchConfig ",
          "         --configsets full_install ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n",

          "/opt/aws/bin/cfn-signal -e $? ",
          "         --stack ", { "Ref" : "AWS::StackId" },
          "         --resource AppServerGroup ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    }

  },

  "Outputs" : {
    "AppServerGroup" : {
      "Description": "The AppServerGroup ID",
      "Value" : { "Ref" : "AppServerGroup" }
    },
    "LaunchConfig" : {
      "Description": "The LaunchConfig ID",
      "Value" : { "Ref" : "LaunchConfig" }
    },
    "ElasticLoadBalancer" : {
      "Description": "The ElasticLoadBalancer ID",
      "Value" : { "Ref" : "ElasticLoadBalancer" }
    }
  }
}